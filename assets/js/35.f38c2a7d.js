(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{410:function(e,t,r){"use strict";r.r(t);var n=r(12),o=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Vue2和Vue3之间存在一些显著的区别，这些区别主要体现在以下方面：")]),e._v(" "),t("p",[e._v("双向数据绑定原理：Vue2使用ES5的Object.defineProperty() API对数据进行劫持，并结合发布订阅模式实现双向数据绑定。而Vue3则使用ES6的Proxy API对数据代理来实现双向数据绑定。\n是否支持碎片：Vue2不支持碎片，而Vue3支持碎片，允许拥有多个根节点。\nAPI类型：Vue2使用选项类型api，在代码里分割不同的属性，如data、computed、methods等。而Vue3则使用合成型api，新的合成型api能让我们使用方法来分割，相比于旧的api使用属性来分组，代码更加简便和整洁。\n以上就是Vue2和Vue3的主要区别，这些区别为开发者和使用者提供了更多灵活性和效率。\nObject.defineProperty()和Proxy是JavaScript中两个重要的概念，前者用于定义对象的属性或修改对象现有的属性，而后者则用于对普通对象进行包装。在某些情况下，它们可能会被用来实现相似的功能，但它们的工作原理和使用方法是有所不同的。")]),e._v(" "),t("p",[e._v("数据代理方式defineProperty和Proxy的区别")]),e._v(" "),t("ol",[t("li",[e._v("Object.defineProperty():")])]),e._v(" "),t("ul",[t("li",[e._v("用途：Object.defineProperty()方法用于在对象上定义新的属性或修改现有属性。")]),e._v(" "),t("li",[e._v("参数：这个方法接收三个参数，分别是目标对象（obj），要定义或修改的属性的名称（prop），以及要赋给该属性的值（value）。")]),e._v(" "),t("li",[e._v("返回值：这个方法返回被传递给函数的对象，即定义或修改属性的对象。")]),e._v(" "),t("li",[e._v("数据类型：Object.defineProperty()是一个函数。")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("Proxy:")])]),e._v(" "),t("ul",[t("li",[e._v("用途：Proxy对象用于创建一个对象的代理，你可以通过定义handler来拦截并改变一些基本类型的行为，以实现更加复杂的操作。")]),e._v(" "),t("li",[e._v("参数：Proxy()构造函数接受两个参数，第一个参数是目标对象（target），第二个参数是一个描述符（descriptor），用于定义或修改目标对象的属性。")]),e._v(" "),t("li",[e._v("返回值：Proxy()构造函数返回一个新的对象，这个对象是对目标对象的代理。")]),e._v(" "),t("li",[e._v("数据类型：Proxy是一个对象。")])]),e._v(" "),t("p",[e._v("总的来说，Object.defineProperty()和Proxy都可以用来修改对象的属性，但它们在实现方式和使用方式上有所不同。前者更倾向于提供一种直接的方式来修改对象的属性，而后者则提供了一种更加灵活的方式来拦截和改变对象的属性访问和修改行为。\n")]),t("style",[e._v("\n.v[data-class=v]{\nmargin: auto;\nwidth: 80%;\n}\n.vedit {\nheight: 50px;\n}\n")]),t("p")])}),[],!1,null,null,null);t.default=o.exports}}]);