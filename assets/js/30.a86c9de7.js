(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{405:function(e,t,n){"use strict";n.r(t);var v=n(12),s=Object(v.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Vue是一款用于构建用户界面的渐进式JavaScript框架，它与其他大型框架不同的是，Vue被设计为可以自底向上逐层应用。")]),e._v(" "),t("ol",[t("li",[e._v("Vue的特性：")])]),e._v(" "),t("p",[e._v("Vue的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue也完全能够为复杂的单页应用提供驱动。")]),e._v(" "),t("p",[e._v("（1）简单：Vue.js的中心思想就是数据驱动，简单的理解就是直接将数据同步到结构上，视图管理抽象为数据管理，而不是管理DOM结构。")]),e._v(" "),t("p",[e._v("（2）轻量级：Vue.js不支持IE8及其以下版本，因为Vue.js使用了IE8不能模拟的ECMAScript 5特性。Vue.js支持所有兼容ECMAScript 5的浏览器。它的API简洁，易于学习和使用。")]),e._v(" "),t("p",[e._v("（3）灵活：主张最少。每个框架都不可避免会有自己的一些特点，从而会对使用者有一定的要求，这些要求就是主张，主张有强有弱，它的强势程度会影响在业务开发中的使用方式。双向数据绑定是vue.js最大的优点:通过MVVM思想实现数据的双向绑定，让开发者不用再操作DOM对象,有更多的时间去思考业务逻辑。")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[e._v("Vue的应用：对于简单的mvvm(model-view-viewmodel)，Vue.js通过组件化将一个单页应用中的各种模块拆分到一个一个单独的组件(component)中，组件标签(占坑)，并且写好要传入组件的参数(这个参数叫做组件的属性)，然后再分别写好各种组件的实现(填坑)，然后整个应用就算做完了。")])]),e._v(" "),t("p",[e._v("以上信息仅供参考，如需了解更多信息，请访问Vue.js官网查询相关资料。\n")]),t("style",[e._v("\n.v[data-class=v]{\nmargin: auto;\nwidth: 80%;\n}\n.vedit {\nheight: 50px;\n}\n")]),t("p")])}),[],!1,null,null,null);t.default=s.exports}}]);